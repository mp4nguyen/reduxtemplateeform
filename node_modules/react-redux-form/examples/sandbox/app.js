import React, { Component } from 'react'
import ReactDOM from 'react-dom'

import { createStore, applyMiddleware } from 'redux'
import { Provider, connect } from 'react-redux'
import { Form, Control, Errors, combineForms, actions } from 'react-redux-form'
import thunk from 'redux-thunk';
import createLogger from 'redux-logger';

const initialUserState = {
  friends: [{name: 'bob'}],
};

const store = createStore(combineForms({
  user: initialUserState,
}), applyMiddleware(thunk, createLogger()));

window.store = store;

class UserForm extends Component {
  render() {
    const { dispatch, user } = this.props;

    return (
      <Form model="user">
        {user.friends.map((friend, i) =>
          <div key={i}>
            <Control.text model={`.friends[${i}].name`} key={i} />
            <div onClick={() => dispatch(actions.remove('user.friends', i))}>
              delete
            </div>
          </div>
        )}
        <Control
          model=".username"
          type="text"
          mapProps={{
            className: ({fieldValue}) => (
              fieldValue.focus
                ? 'focused'
                : ''
            )}}
        />
        <div onClick={() => dispatch(actions.push('user.friends[]', {name: 'new'}))}>
          add friend
        </div>
      </Form>
    );
  }
}

const CUserForm = connect(s=>s)(UserForm);

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <CUserForm />
      </Provider>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));
